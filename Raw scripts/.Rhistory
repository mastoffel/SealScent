# heterozygosity vector SH
heterozygosity <- read.csv(".\\csv_files\\heterozygosity_41loci.csv", row.names=1)
# beach and family vector
factors <- read.csv(".\\csv_files\\factors.csv",row.names=1)
if (type == "pca"){
scores <- PCAScores(scent.abundance)
} else if (type == "fa") {
scores <- FAScores(scent.abundance)
} else if (type == "pcoa") {
scores <- PCOAScores(scent.abundance)
}
source("ScentResults.R")
res <- ScentResults("mums","fa",1, beach=1)
# subset results list output
relate.df <- res[[1]]
results.relatedness <- res[[2]]
relate.list <- res[[3]]
relatedness <- res[[4]]
het.df <- res[[5]]
results.het <- res[[6]]
scores <- res[[7]]
factors <- res[[8]]
subgroup <- "mums"
type <- "fa"
beach <- 1
## packages
library("ggplot2")
library("grid")
library("vegan")
library("MASS") #required for vegan
## functions
source("PCAScores.R")
source("FAScores.R")
source("PCADiff.R")
source("SubsetAll.R")
source("ResultsRelatedness.R")
source("resultsHet.R")
source("multiplot.R")
source("PCOAScores.R")
## loading data
# already standardized and transformed, transposed abundance matrix
scent.abundance <- as.data.frame(t(read.csv(".\\csv_files\\scent abundance nobeach.csv",row.names=1)))
# 6 different diversity indices (from primer)
scent.diversity <- read.csv(".\\csv_files\\scent diversity.csv",row.names=1)
# relatedness matrix
relatedness <- read.csv(".\\csv_files\\relatedness_41loci.csv",row.names=1)
# heterozygosity vector SH
heterozygosity <- read.csv(".\\csv_files\\heterozygosity_41loci.csv", row.names=1)
# beach and family vector
factors <- read.csv(".\\csv_files\\factors.csv",row.names=1)
## computing PCA with vegan package (10 Principal Components) //
# pca on the whole dataset and then subsetted
if (type == "pca"){
scores <- PCAScores(scent.abundance)
} else if (type == "fa") {
scores <- FAScores(scent.abundance)
} else if (type == "pcoa") {
scores <- PCOAScores(scent.abundance)
}
NumFactors <- ncol(scores)
## subsetting all data objects
Sub <- SubsetAll(subgroup,scent.abundance,scent.diversity,relatedness,
heterozygosity,scores,factors) # out:list
# from list back to original formats
abund <- Sub[[1]]
div <- Sub[[2]]
relate <- Sub[[3]]
het <- Sub[[4]]
scores <- Sub[[5]]
factors <- Sub[[6]]
if (beach == 1) {
abund <- abund[factors$Beach==1, ]
div <- div[factors$Beach==1, ]
relate <- relate[factors$Beach==1, factors$Beach==1]
het <- subset(het, factors$Beach==1)
scores <- scores[factors$Beach==1, ]
factors <- factors[factors$Beach==1, ]
} else if (beach == 2) {
abund <- abund[factors$Beach==2, ]
div <- div[factors$Beach==2, ]
relate <- relate[factors$Beach==2, factors$Beach==2]
het <- subset(het, factors$Beach==2)
scores <- scores[factors$Beach==2, ]
factors <- factors[factors$Beach==2, ]
}
## get pairwise pca differences and  relatedness as vectors or diff.pc matrix
# diff.pc.mat.mums <- PCADiff(relate.mums,pca.scores.mums,num.pca=6, df=TRUE)
diff.relate.vecs <- PCADiff(relate,scores, df=F)
diff.relate.dfs <- PCADiff(relate,scores, df=T)
## diff.relate.vecs$genetic.distance <- 1 - diff.relate.vecs$genetic.distance
relate.df <- diff.relate.vecs
relate.list <- diff.relate.dfs
results.relatedness <- ResultsRelatedness(relate,scores, abund, NumFactors)
het.df <- data.frame("het"= het[,1],row.names=rownames(het))
het.df$NumComps <- div$S
het.df[, 3:(2+NumFactors)] <- scores[, 1:NumFactors]
# PC vs. Heterozygosity
results.het <- resultsHet(het.df, NumFactors)
View(results.het)
View(factors)
source("ScentResults.R")
res <- ScentResults("mums","fa", beach=1)
# subset results list output
relate.df <- res[[1]]
results.relatedness <- res[[2]]
relate.list <- res[[3]]
relatedness <- res[[4]]
het.df <- res[[5]]
results.het <- res[[6]]
scores <- res[[7]]
factors <- res[[8]]
source("ScentResults.R")
res <- ScentResults("mums","fa", beach=1)
# subset results list output
relate.df <- res[[1]]
results.relatedness <- res[[2]]
relate.list <- res[[3]]
relatedness <- res[[4]]
het.df <- res[[5]]
results.het <- res[[6]]
scores <- res[[7]]
factors <- res[[8]]
View(results.relatedness)
View(results.het)
source("ScentResults.R")
res <- ScentResults("mums","fa", beach=2)
# subset results list output
relate.df <- res[[1]]
results.relatedness <- res[[2]]
relate.list <- res[[3]]
relatedness <- res[[4]]
het.df <- res[[5]]
results.het <- res[[6]]
scores <- res[[7]]
factors <- res[[8]]
View(results.relatedness)
View(results.het)
View(het.df)
plot(het.df$het, het.df$F1)
plot(het.df$het, het.df$F2)
plot(het.df$NumComps, het.df$het)
plot(relate.df$relatedness, relate.df$F1)
plot(relate.df$F1,relate.df$relatedness)
setwd("C:/Users/Martin/Studium/MSc.Behaviour/Research/Seal Scent/R code/Raw scripts")
source("ScentResults.R")
res <- ScentResults("mums","fa", beach=0)
# subset results list output
relate.df <- res[[1]]
results.relatedness <- res[[2]]
relate.list <- res[[3]]
relatedness <- res[[4]]
het.df <- res[[5]]
results.het <- res[[6]]
scores <- res[[7]]
factors <- res[[8]]
source("ScentResults.R")
res <- ScentResults("mums","fa", beach=0)
# subset results list output
relate.df <- res[[1]]
results.relatedness <- res[[2]]
relate.list <- res[[3]]
relatedness <- res[[4]]
het.df <- res[[5]]
results.het <- res[[6]]
scores <- res[[7]]
factors <- res[[8]]
library(plyr)
source("summarySE.R")
genclass <- cut(relate.df$relatedness,8)
relate.df$genclass <- as.factor(genclass)
levels(relate.df$genclass) <- c("1","2","3","4","5",
"6","7","8")
group1 <- relate.df[relate.df$genclass==1, ]
newdata <- relate.df[order(relate.df$relatedness), ]
equgroups <- rep(1:10, rep(82,10))
relate.df$groups <- equgroups
t <- summarySE(relate.df, measurevar = "F1", groupvars = "groups")
View(group1)
scent.abundance <- as.data.frame(t(read.csv(".\\csv_files\\scent abundances.csv",row.names=1)))
View(scent.abundance)
View(relatedness)
View(newdata)
newdata <- relate.df[order(relate.df$relatedness), ]
equgroups <- rep(1:10, rep(82,10))
relate.df$groups <- equgroups
ggplot(t, aes(x = 1:10,y = F1)) +
theme_bw(base_size=20) +
geom_point( fill = "black", size=5) +
geom_errorbar(aes(ymin=F1-se, ymax=F1+se), width=.1) +
scale_x_continuous(breaks=c(seq(from=1, to = 8, by =1)))
source("ScentResults.R")
res <- ScentResults("mums","fa", beach=0)
# subset results list output
relate.df <- res[[1]]
results.relatedness <- res[[2]]
relate.list <- res[[3]]
relatedness <- res[[4]]
het.df <- res[[5]]
results.het <- res[[6]]
scores <- res[[7]]
factors <- res[[8]]
library(plyr)
source("summarySE.R")
genclass <- cut(relate.df$relatedness,8)
relate.df$genclass <- as.factor(genclass)
levels(relate.df$genclass) <- c("1","2","3","4","5",
"6","7","8")
group1 <- relate.df[relate.df$genclass==1, ]
newdata <- relate.df[order(relate.df$relatedness), ]
equgroups <- rep(1:10, rep(82,10))
relate.df$groups <- equgroups
t <- summarySE(relate.df, measurevar = "F1", groupvars = "groups")
boxplot(relate.df$pca.diff ~ relate.df$genclass)
barplot(t$mean)
ggplot(t, aes(x = 1:10,y = F1)) +
theme_bw(base_size=20) +
geom_point( fill = "black", size=5) +
geom_errorbar(aes(ymin=F1-se, ymax=F1+se), width=.1) +
scale_x_continuous(breaks=c(seq(from=1, to = 8, by =1)))
View(results.relatedness)
View(relate.df)
View(group1)
setwd("C:/Users/Martin/DataScience/ReproducibleResearch/PeerAssessment1/RepData_PeerAssessment1")
library(data.table)
activity <- read.csv("activity.csv")
activity <- as.data.table(activity)
library(dplyr)
by.day <- group_by(activity, date)
summary.steps <- summarise(by.day,
counts = sum(steps))
View(summary.steps)
View(by.day)
plot(summary.steps$counts)
barplot(summary.steps$counts)
hist(summary.steps$counts)
barplot(summary.steps$counts)
library(ggplot2)
qplot(counts, data=summary.steps, geom="bar")
qplot(y = counts, data=summary.steps, geom="bar")
qplot(dat, counts, data=summary.steps, geom="bar")
qplot(dates, counts, data=summary.steps, geom="bar")
qplot(date, counts, data=summary.steps, geom="bar")
qplot(date, counts, data=summary.steps, geom="bar", stat="bin")
qplot(date, counts, data=summary.steps, geom="bar", stat="identity")
?qplot
plotsteps <- gglot(data=summary.steps, aews(x = date, y = counts)) +
geom_bar()
plotsteps <- ggplot(data=summary.steps, aews(x = date, y = counts)) +
geom_bar()
plotsteps <- ggplot(data=summary.steps, aes(x = date, y = counts)) +
geom_bar()
plotsteps
plotsteps <- ggplot(data=summary.steps, aes(x = date, y = counts)) +
geom_bar(stat="identity") +
theme_minimal()
plotsteps
?as.date
str(activity)
plotsteps <- ggplot(data=summary.steps, aes(x = date, y = counts)) +
geom_bar(stat="identity") +
theme_minimal(base_size=24) +
ylab("") +
ggtitle("Number of steps per day")
plotsteps
plotsteps <- ggplot(data=summary.steps, aes(x = date, y = counts)) +
geom_bar(stat="identity") +
theme_minimal(base_size=24) +
theme(axis.text.x = element_blank()) +
ylab("") +
ggtitle("Number of steps per day")
plotsteps
plotsteps <- ggplot(data=summary.steps, aes(x = date, y = counts)) +
geom_bar(stat="identity") +
theme_minimal(base_size=24) +
theme(axis.text.x = as.character(1:61)) +
ylab("") +
ggtitle("Number of steps per day")
plotsteps <- ggplot(data=summary.steps, aes(x = date, y = counts)) +
geom_bar(stat="identity") +
theme_minimal(base_size=24) +
theme(axis.text.x = element_text(as.character(1:61))) +
ylab("") +
ggtitle("Number of steps per day")
plotsteps
plotsteps <- ggplot(data=summary.steps, aes(x = date, y = counts)) +
geom_bar(stat="identity") +
theme_minimal(base_size=24) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank()) +
ylab("") +
ggtitle("Number of steps per day")
plotsteps
plotsteps <- ggplot(data=summary.steps, aes(x = date, y = counts)) +
geom_bar(stat="identity") +
theme_bw(base_size=24) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank()) +
ylab("") +
ggtitle("Number of steps per day")
plotsteps
by.int <- group_by(activity, interval)
mean.activity <- summarise(by.int,
average = mean(steps, na.rm=T))
plot(mean.activity$interval, mean.activity$average, type="l")
ggplot(data = mean.activity, aes(x = interval, y = average) +
geom_line()
)
ggplot(data = mean.activity, aes(x = interval, y = average)) +
geom_line()
ggplot(data = mean.activity, aes(x = interval, y = average)) +
geom_line() +
theme_minimal(base_size = 24)
ggplot(data = mean.activity, aes(x = interval, y = average)) +
geom_line() +
theme_minimal(base_size = 22)
ggplot(data = mean.activity, aes(x = interval, y = average)) +
geom_line() +
theme_minimal(base_size = 22) +
ggtitle("Average number of steps per time interval")
maxact <- mean.activity[which.max(mean.activity$average), interval]
maxact
View(activity)
sum(activity$steps==NA)
activity$steps==NA
sum(activity$steps=NA)
sum(activity[activity$steps=NA])
sum(is.na(activity$steps))
View(mean.activity)
View(summary.steps)
?find
?which
apply(activity[1:10, ], 1, function(x) print(x))
apply(activity[1:10, ], 1, function(x) print(x$steps))
apply(activity[1:10, ], 1, function(x) print(str(x))
)
apply(activity[1:10, ], 1, function(x) print(str(as.data.frame(x)))
)
apply(activity[1:10, ], 1, function(x) print(class(x)))
apply(activity[1:10, ], 1, function(x) x)
apply(activity[1:10, ], 1, function(x) x["steps"])
apply(activity[1:10, ], 1, function(x) x["date"])
which(activity$interval == 5)
View(activity)
which(mean.activity$interval == 5)
View(activity)
exchange <- function(x) {
if (x["steps"] == NA) {
int <- which(mean.activity$interval == as.numeric(x["interval"]))
x["steps"] <- mean.activity$steps[int]
}
}
act <- apply(activity, 1, exchange(x))
act <- apply(activity, 1, exchange)
View(activity)
exchange <- function(x) {
if (is.na(x["steps"])) {
int <- which(mean.activity$interval == as.numeric(x["interval"]))
x["steps"] <- mean.activity$steps[int]
}
}
act <- apply(activity, 1, exchange)
apply(activity[1:10, ], 1, function(x) x["steps"])
apply(activity[1:10, ], 1, function(x) is.na(x["steps"]))
apply(activity[1:10, ], 1, function(x) (x["interval"]))
apply(activity[1:10, ], 1, function(x) (as.integer(x["interval"])))
exchange <- function(x) {
if (is.na(x["steps"])) {
int <- which(mean.activity$interval == as.integer(x["interval"]))
x["steps"] <- mean.activity$steps[int]
}
}
act <- apply(activity, 1, exchange)
View(mean.activity)
exchange <- function(x) {
if (is.na(x["steps"])) {
int <- which(mean.activity$average == as.integer(x["interval"]))
x["steps"] <- mean.activity$steps[int]
}
}
act <- apply(activity, 1, exchange)
exchange <- function(x) {
if (is.na(x["steps"])) {
int <- which(mean.activity$interval == as.integer(x["interval"]))
x["steps"] <- mean.activity$average[int]
}
}
act <- apply(activity, 1, exchange)
activity$steps <- apply(activity, 1, exchange)
View(activity)
exchange <- function(x) {
if (is.na(x["steps"])) {
int <- which(mean.activity$interval == as.integer(x["interval"]))
x["steps"] <- mean.activity$average[int]
} else {
x["steps"]
}
}
activity <- read.csv("activity.csv")
activity <- as.data.table(activity)
activity$steps <- apply(activity, 1, exchange)
View(activity)
activity <- read.csv("activity.csv")
activity <- as.data.table(activity)
View(activity)
View(mean.activity)
View(activity)
View(activity)
exchange <- function(x) {
if (is.na(x["steps"])) {
int <- which(mean.activity$interval == as.integer(x["interval"]))
fill <- mean.activity$average[int]
}
exchange <- function(x) {
if (is.na(x["steps"])) {
int <- which(mean.activity$interval == as.integer(x["interval"]))
fill <- mean.activity$average[int]
}
}
activity$steps <- apply(activity, 1, exchange)
View(activity)
apply(activity, 1, exchange)
activity <- read.csv("activity.csv")
activity <- as.data.table(activity)
t <- apply(activity, 1, exchange)
t
t[NULL]
hist(t)
which(t, NULL)
which(t == NULL)
activity <- read.csv("activity.csv")
activity <- as.data.table(activity)
View(activity)
table(activity)
View(mean.activity)
t <- lapply(activity, 1, exchange)
is.na(activity$steps)
t <- apply(activity, 1, exchange)
t <- lapply(activity, 1, exchange)
?do.call
?data.table
activity[, list(MeanInt=mean(steps, na.rm=T), by = interval)]
View(activity)
View(mean.activity)
activity[, list(MeanInt=mean(steps, na.rm=T), by = day)]
activity[, list(MeanInt=mean(steps, na.rm=T), by = date)]
activity[, MeanInt:=mean(steps, na.rm=T), by = date)]
activity[, MeanInt:=mean(steps, na.rm=T), by = date]
View(activity)
activity[, MeanInt:=mean(steps, na.rm=T), by = intervall]
activity <- read.csv("activity.csv")
activity <- as.data.table(activity)
activity[, MeanInt:=mean(steps, na.rm=T), by = intervall]
activity[, MeanInt:=mean(steps, na.rm=T), by = interval]
View(activity)
activity$steps[is.na(activity$steps)] <- activity$MeanInt[is.na(activity$steps)]
View(activity)
by.int2 <- group_by(activity, interval)
mean.activity2 <- summarise(by.int,
average = mean(steps, na.rm=T))
ggplot(data = mean.activity2, aes(x = interval, y = average)) +
geom_line() +
theme_minimal(base_size = 22) +
ggtitle("Average number of steps per time interval")
by.day2 <- group_by(activity, date)
summary.steps2 <- summarise(by.day,
counts = sum(steps))
# plot
ggplot(data=summary.steps2, aes(x = date, y = counts)) +
geom_bar(stat="identity") +
theme_minimal(base_size=24) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank()) +
ylab("") +
ggtitle("Number of steps per day")
mean(summary.steps2$counts, na.rm=T)
median(summary.steps2$counts, na.rm=T)
mean(summary.steps$counts, na.rm=T)
median(summary.steps$counts, na.rm=T)
View(summary.steps2)
View(summary.steps)
library(Demerelate)
gen <- read.table("C://Users//Martin//Studium//MSc.Behaviour//Research//Seal Scent//R code//raw scripts//41_loci.txt", header = TRUE)
View(gen)
ger <- gen[, -BAS]
ger <- gen[, -"Pop"]
View(gen)
ger <- gen[, -Pop]
ger <- gen[, -2]
View(ger)
gen <- gen[, -2]
rm(ger)
View(gen)
rels <- Demerelate(gen, object=TRUE, value="rxy" , NA.rm=FALSE, ref.pop = "NA", file.output=TRUE)
rels <- Demerelate(gen, object=TRUE, value="rxy" , NA.rm=TRUE, ref.pop = "NA", file.output=TRUE)
rels <- Demerelate(gen[, 1:6], object=TRUE, value="rxy" , NA.rm=TRUE, ref.pop = "NA", file.output=TRUE)
data(demerelpop)
View(demerelpop)
View(gen)
View(gen)
View(demerelpop)
gen2 <- ("C://Users//Martin//Studium//MSc.Behaviour//Research//Seal Scent//R code//raw scripts//41_loci.txt")
gen2 <- input.txt("C://Users//Martin//Studium//MSc.Behaviour//Research//Seal Scent//R code//raw scripts//41_loci.txt")
gen2 <- input.txt("C://Users//Martin//Studium//MSc.Behaviour//Research//Seal Scent//R code//raw scripts//41_loci.txt", mod="pop")
View(gen2)
gen2 <- gen2[, -2]
rels <- Demerelate(gen2[, 1:6], object=TRUE, value="rxy" , NA.rm=TRUE, ref.pop = "NA", file.output=TRUE)
rels <- Demerelate(gen2[, 1:6], object=TRUE, value="rxy" , NA.rm=FALSE, ref.pop = "NA", file.output=TRUE)
?Demerelate
lm.R
lm
relatedness <- read.csv(".\\csv_files\\relatedness_41loci.csv",row.names=1)
View(relatedness)
